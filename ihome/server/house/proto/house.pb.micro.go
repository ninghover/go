// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/house.proto

package house

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for House service

func NewHouseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for House service

type HouseService interface {
	GetHouseInfo(ctx context.Context, in *HouseInfoReq, opts ...client.CallOption) (*HouseInfoRsp, error)
	PostHouseInfo(ctx context.Context, in *PostHouseReq, opts ...client.CallOption) (*PostHouseRsp, error)
}

type houseService struct {
	c    client.Client
	name string
}

func NewHouseService(name string, c client.Client) HouseService {
	return &houseService{
		c:    c,
		name: name,
	}
}

func (c *houseService) GetHouseInfo(ctx context.Context, in *HouseInfoReq, opts ...client.CallOption) (*HouseInfoRsp, error) {
	req := c.c.NewRequest(c.name, "House.GetHouseInfo", in)
	out := new(HouseInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseService) PostHouseInfo(ctx context.Context, in *PostHouseReq, opts ...client.CallOption) (*PostHouseRsp, error) {
	req := c.c.NewRequest(c.name, "House.PostHouseInfo", in)
	out := new(PostHouseRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for House service

type HouseHandler interface {
	GetHouseInfo(context.Context, *HouseInfoReq, *HouseInfoRsp) error
	PostHouseInfo(context.Context, *PostHouseReq, *PostHouseRsp) error
}

func RegisterHouseHandler(s server.Server, hdlr HouseHandler, opts ...server.HandlerOption) error {
	type house interface {
		GetHouseInfo(ctx context.Context, in *HouseInfoReq, out *HouseInfoRsp) error
		PostHouseInfo(ctx context.Context, in *PostHouseReq, out *PostHouseRsp) error
	}
	type House struct {
		house
	}
	h := &houseHandler{hdlr}
	return s.Handle(s.NewHandler(&House{h}, opts...))
}

type houseHandler struct {
	HouseHandler
}

func (h *houseHandler) GetHouseInfo(ctx context.Context, in *HouseInfoReq, out *HouseInfoRsp) error {
	return h.HouseHandler.GetHouseInfo(ctx, in, out)
}

func (h *houseHandler) PostHouseInfo(ctx context.Context, in *PostHouseReq, out *PostHouseRsp) error {
	return h.HouseHandler.PostHouseInfo(ctx, in, out)
}
